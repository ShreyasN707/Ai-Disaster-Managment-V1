version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ai-disaster-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ai_disaster_mgmt
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ai-disaster-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Main Application (Backend + Frontend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-disaster-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=4000
      - MONGO_URI=mongodb://admin:password123@mongodb:27017/ai_disaster_mgmt?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=7d
      - ADMIN_REGISTRATION_CODE=admin123
      - LOG_LEVEL=info
      - UPLOAD_DIR=uploads
      - ML_MODEL_PATH=./tfjs_model
      - ENABLE_ML_SERVICE=true
      - FRONTEND_URL=http://localhost:4000
      - CORS_ORIGINS=http://localhost:4000,http://localhost:3000
    ports:
      - "4000:4000"
    volumes:
      - app_uploads:/app/uploads
      - app_models:/app/tfjs_model
      - app_logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ai-disaster-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-disaster-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-disaster-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: ai-disaster-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ai-disaster-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_models:
    driver: local
  app_logs:
    driver: local

networks:
  ai-disaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
